-- SQL Server Instance:  appdb01
USE [Utilities];
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND OBJECT_ID = OBJECT_ID('sl.qy_GetDailyReportConfig'))
   DROP PROC [sl].[qy_GetDailyReportConfig]
GO
CREATE PROCEDURE [sl].[qy_GetDailyReportConfig]
/* -----------------------------------------------------------------------------------------------------------
   Procedure Name  :  sl.qy_GetDailyReportConfig
   Business Analyis:
   Project/Process :   
   Description     :  Get the config options for the Daily Reports application.
	  
   Author          :  Philip Morrison 
   Create Date     :  05/05/2025

   ***********************************************************************************************************
   **         Change History                                                                                **
   ***********************************************************************************************************

   Date       Version    Author             Description
   --------   --------   -----------        ------------
   05/05/2025 1.01.001   Philip Morrison    Created

*/ -----------------------------------------------------------------------------------------------------------                                   

AS
BEGIN

-- This Instance Declarations

-- KeyValueTable
DECLARE @KeyValueTable Table
(
   [Name] [nvarchar] (1000)
   ,[Value] [nvarchar] (1000)
);

DECLARE @WriteDirectory [varchar] (200) = ''
DECLARE @ArchiveDirectory [varchar] (200) = ''
DECLARE @ExcelTemplateFullFilename [varchar] (200) = ''
DECLARE @DailyReportsBaseWebApiUrl [varchar] (200) = ''
DECLARE @EmailBaseWebApiUrl [varchar] (200) = ''
DECLARE @EmailSubject [varchar] (200) = ''
DECLARE @EmailFromAddress [varchar] (200) = ''
DECLARE @Emailees [varchar] (200) = ''

-- Template Declarations
DECLARE @Application            varchar(128) = 'Summit Life' 
DECLARE @Version                varchar(25)  = '1.00.001'

DECLARE @ProcessID              int          = 212
DECLARE @Process                varchar(128) = 'DailyReports'

DECLARE @BatchOutID             int
DECLARE @BatchDescription       varchar(1000) = @@ServerName + '  - ' + @Version
DECLARE @BatchDetailDescription varchar(1000)
DECLARE @BatchMessage           varchar(MAX)
DECLARE @User                   varchar(128) = SUSER_NAME()

DECLARE @AnticipatedRecordCount int 
DECLARE @ActualRecordCount      int
DECLARE @IsOk [bit] 
DECLARE @MyCount [int] 


SET NOCOUNT ON




BEGIN TRY

--  Initialize Batch
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  NULL, 'BatchStart', @BatchDescription, @ProcessID, @Process
----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate KeyValueTable with call to [administration].[qy_GetApplicationSettings]'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
	                                   FROM @KeyValueTable;
	  
      -- Populate KeyValueTable with call to [administration].[qy_GetApplicationSettings]
      INSERT INTO @KeyValueTable
      (
        [Name]
	    ,[Value]
      )
      EXEC [Admin].[Utilities].[administration].[qy_GetApplicationSettings] 'Summit Life', 'Default', 'DailyReports', NULL, 'AppUser';
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------
    SET @BatchDetailDescription = 'Populate @WriteDirectory'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'WriteDirectory';	
	  
      -- Populate @WriteDirectory
      SELECT @WriteDirectory = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'WriteDirectory';	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate @ArchiveDirectory'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'ArchiveDirectory';	
	  
      -- Populate @ArchiveDirectory
      SELECT @ArchiveDirectory = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'ArchiveDirectory';	
	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate @ExcelTemplateFullFilename'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'ExcelTemplateFullFilename';	
	  
      -- Populate @ExcelTemplateFullFilename
      SELECT @ExcelTemplateFullFilename = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'ExcelTemplateFullFilename';	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate @DailyReportsBaseWebApiUrl'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'DailyReportsBaseWebApiUrl';	
	  
      -- Populate @DailyReportsBaseWebApiUrl
      SELECT @DailyReportsBaseWebApiUrl = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'DailyReportsBaseWebApiUrl';	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate @EmailBaseWebApiUrl'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'EmailBaseWebApiUrl';	
	  
      -- Populate @EmailBaseWebApiUrl
      SELECT @EmailBaseWebApiUrl = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'EmailBaseWebApiUrl';	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate @EmailSubject'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'EmailSubject';	
	  
      -- Populate @EmailSubject
      SELECT @EmailSubject = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'EmailSubject';	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate @EmailFromAddress'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'EmailFromAddress';	
	  
      -- Populate @EmailFromAddress
      SELECT @EmailFromAddress = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'EmailFromAddress';	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'Populate @Emailees'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = COUNT(*)
      FROM @KeyValueTable
      WHERE [Name] = 'Emailees';	
	  
      -- Populate @Emailees
      SELECT @Emailees = [Value]
      FROM @KeyValueTable
      WHERE [Name] = 'Emailees';	
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------

    SET @BatchDetailDescription = 'SELECT 1 Output Record of Config Options'
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailStart', @BatchDetailDescription
	
	  SELECT @AnticipatedRecordCount = 1
      FROM @KeyValueTable;	
	  
      -- SELECT 1 Output Record of Config Options
      SELECT
	    @WriteDirectory AS [WriteDirectory]
        ,@ArchiveDirectory AS [ArchiveDirectory]
        ,@ExcelTemplateFullFilename AS [ExcelTemplateFullFilename]
        ,@DailyReportsBaseWebApiUrl AS [DailyReportsBaseWebApiUrl]
        ,@EmailBaseWebApiUrl AS [EmailBaseWebApiUrl]
        ,@EmailSubject AS [EmailSubject]
        ,@EmailFromAddress AS [EmailFromAddress]
        ,@Emailees AS [Emailees]
	
    SET @ActualRecordCount = @@ROWCOUNT
    EXEC Admin.Utilities.logs.di_Batch @BatchOutID OUTPUT,  @BatchOutID, 'DetailEnd', NULL, NULL, NULL, @AnticipatedRecordCount, @ActualRecordCount

----------------------------------------------------------------------------------------------------------------------------------------------------  	

--  Close batch
    EXEC Admin.Utilities.logs.di_batch @BatchOutID OUTPUT, @BatchOutID, 'BatchEnd'

END TRY

BEGIN CATCH
DECLARE @Err              int
     ,  @ErrorMessage     varchar(Max)
     ,  @ErrorLine        varchar(128)
     ,  @Workstation      varchar(128) = @Application
     ,  @Procedure        VARCHAR(500)

    IF ERROR_NUMBER() IS NULL 
      SET @Err =0;
    ELSE
      SET @Err = ERROR_NUMBER();

    SET @ErrorMessage = ERROR_MESSAGE()
    print '@ErrorMessage length = ' + convert(nvarchar (20), len(@ErrorMessage))

    print '@ErrorMessage = ' + @ErrorMessage
	
    SET @ErrorLine    = 'SP Line Number: ' + CAST(ERROR_LINE() as varchar(10)) 
    
	SET @Workstation  = HOST_NAME()
	
    SET @Procedure    = @@SERVERNAME + '.' + DB_NAME() + '.' + OBJECT_SCHEMA_NAME(@@ProcID) + '.' + OBJECT_NAME(@@ProcID) + ' - ' + @ErrorLine + ' - ' + LEFT(@BatchDetailDescription, 7)
    EXEC Admin.Utilities.administration.di_ErrorLog  @Application ,@Process, @Version ,0, @ErrorMessage, @Procedure,  @User , @Workstation

    SET @BatchMessage = 'Process Failed:  ' +  @ErrorMessage
    EXEC Admin.Utilities.logs.di_batch @BatchOutID OUTPUT, @BatchOutID, 'BatchEnd', @BatchMessage
	
    RAISERROR(@ErrorMessage, 16,1)

END CATCH

END